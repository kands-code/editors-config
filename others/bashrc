#!/bin/env bash

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

alias ls='ls --color=auto'
alias mvn="${HOME}/.local/sdk/maven/3.9.8/bin/mvn --settings='${HOME}/.local/sdk/maven/3.9.8/conf/settings.xml'"
alias ww="uwufetch"

# GPG config
export GPG_TTY=$(tty)
export GNUPGHOME="$XDG_DATA_HOME/gnupg"

# daily update
dailyup() {
  # paru
  paru -Syu
  paru -Fy
  paru -Sc
  # rust
  if command -v rustup >/dev/null 2>&1; then
    rustup update
    if [ "$?" = '0' ]; then
      cargo install --all-features \
        mdbook \
        mdbook-katex \
        mdbook-toc \
        wasm-pack \
        pest-language-server
    fi
  fi
  # haskell
  if command -v ghcup >/dev/null 2>&1; then
    cabal v2-update
    stack update
  fi
}

# rye init
if [ -n "$RYE_HOME" ]; then
  source "$RYE_HOME/env"
fi

# PS1='[\u@\h \W]\$ '

# self prompt
function exitstatus() {
  if [[ "$?" == '0' ]]; then
    printf "\033[1;32m[v]\033[0m"
  else
    printf "\033[1;31m[x]\033[0m"
  fi
}

function usersymbol() {
  if [[ "$UID" == '0' ]]; then
    printf "\033[1;31m[#]\033[0m"
  else
    printf "\033[1;36m[$]\033[0m"
  fi
}

export PS0='\[\033[0;36m\]Out[\#]:= \[\033[0m\]\n'
export PS1='[\u@\h \w \A]-\[$(exitstatus)\]-\[$(usersymbol)\]\n\[\033[0;33m\]In[\#]:= \[\033[0m\]'
export PS2=' ~> '

# for pandoc auto complete
if command -v pandoc >/dev/null 2>&1; then
  eval "$(pandoc --bash-completion)"
fi

# stack auto complete
if command -v stack >/dev/null 2>&1; then
  eval "$(stack --bash-completion-script stack)"
fi

# yt-dlp wrapper
if command -v yt-dlp >/dev/null 2>&1; then
  if command -v ffmpeg >/dev/null 2>&1; then
    yd() {
      local url="$1"
      shift
      if [ -z "$url" ]; then
        echo "please give a url"
        return 1
      fi
      yt-dlp -o "%(uploader_id)s/%(playlist_title)s/p%(playlist_index)03d-%(title)s.%(ext)s" \
        -f "bestvideo+bestaudio" \
        --recode-video="mp4" \
        --write-auto-subs \
        --sub-format="vtt" \
        --sub-langs="en.*,zh-Hans" \
        --embed-subs \
        $url \
        "$@"
      return 0
    }
  fi
fi

# webm to mp4
function webm2mp4() {
  local filename="$1"
  local basename="${filename%.*}"
  ffmpeg -i "$filename" \
    -vf "pad=ceil(iw/2)*2:ceil(ih/2)*2" \
    -y -an -crf 0 \
    "$basename".mp4
}

# pandoc wrapper
if command -v pandoc >/dev/null 2>&1; then
  if command -v typst >/dev/null 2>&1; then
    cv2pdf() {
      local ftype="$1"
      shift
      local fname="$1"
      shift
      local oname="${fname%.*}.pdf"
      pandoc -f "$ftype" -t "pdf" "$fname" \
        -o "$oname" \
        --pdf-engine=typst \
        --metadata-file="$HOME/projects/config.d/others/pmeta.yaml"
    }
  fi
fi
